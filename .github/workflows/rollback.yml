name: Rollback via PR

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Tag to rollback to (e.g. stable-YYYYMMDD)
        required: true
      target_branch:
        description: Branch to rollback
        default: main
        required: true
      auto_merge:
        description: Try to merge PR automatically
        type: boolean
        default: false
      pr_title:
        description: Custom PR title (optional)
        required: false
      pr_body:
        description: Custom PR body (optional)
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-rollback:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.target_branch }}

      - name: Configure Git author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Print environment and refs (debug)
        shell: bash
        run: |
          set -euo pipefail
          echo "Git version: $(git --version)"
          echo "Inputs: tag='${{ inputs.tag }}' target_branch='${{ inputs.target_branch }}'"
          echo "Remotes:"; git remote -v || true
          echo "Show refs (heads/tags, last 50):"
          git show-ref --tags | tail -n 20 || true
          git show-ref --heads | tail -n 30 || true
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "HEAD SHA: $(git rev-parse HEAD)"
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "Inputs" >> "$GITHUB_STEP_SUMMARY"
          echo "- tag: ${{ inputs.tag }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- target_branch: ${{ inputs.target_branch }}" >> "$GITHUB_STEP_SUMMARY"

      - name: Validate tag and ancestry
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          TAG='${{ inputs.tag }}'
          TARGET_BRANCH='${{ inputs.target_branch }}'
          # タグと対象ブランチの最新を取得
          git fetch --tags origin
          git fetch origin "+refs/heads/${TARGET_BRANCH}:refs/remotes/origin/${TARGET_BRANCH}"
          if ! git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Tag $TAG not found" >&2
            echo "Tag $TAG not found" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          TARGET_SHA=$(git rev-parse "refs/remotes/origin/${TARGET_BRANCH}^{commit}")
          TAG_SHA=$(git rev-parse "$TAG^{commit}")
          echo "TARGET_SHA=$TARGET_SHA" >> "$GITHUB_OUTPUT"
          echo "TAG_SHA=$TAG_SHA" >> "$GITHUB_OUTPUT"
          echo "Resolved: TAG=$TAG -> $TAG_SHA"; echo "Resolved: ${TARGET_BRANCH} -> $TARGET_SHA"
          echo "Resolved" >> "$GITHUB_STEP_SUMMARY"
          echo "- TAG=$TAG -> $TAG_SHA" >> "$GITHUB_STEP_SUMMARY"
          echo "- ${TARGET_BRANCH} -> $TARGET_SHA" >> "$GITHUB_STEP_SUMMARY"
          if git merge-base --is-ancestor "$TAG_SHA" "$TARGET_SHA"; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG is not an ancestor of $TARGET_BRANCH ($TARGET_SHA); cannot compute revert range safely." >&2
            echo "Not ancestor: $TAG_SHA !<= $TARGET_SHA" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

      - name: Create rollback branch and revert range
        id: revert
        shell: bash
        run: |
          set -euo pipefail
          TAG='${{ inputs.tag }}'
          TARGET_BRANCH='${{ inputs.target_branch }}'
          git fetch --tags origin
          git fetch origin "+refs/heads/${TARGET_BRANCH}:refs/remotes/origin/${TARGET_BRANCH}"

          TS=$(date -u +%Y%m%d-%H%M%S)
          BRANCH="rollback/${TARGET_BRANCH}-to-${TAG}-${TS}"
          # 事前にレンジの有無を判定（タグ==ターゲットならノーオペ）
          TAG_SHA=$(git rev-parse "$TAG^{commit}")
          TARGET_SHA=$(git rev-parse "refs/remotes/origin/${TARGET_BRANCH}^{commit}")
          echo "Working with BRANCH=$BRANCH TAG_SHA=$TAG_SHA TARGET_SHA=$TARGET_SHA"
          if [[ "$TAG_SHA" == "$TARGET_SHA" ]]; then
            echo "Tag equals target head (no changes)." >&2
            echo "noop=true" >> "$GITHUB_OUTPUT"
            echo "No-op: same commit $TAG_SHA" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          git checkout -b "$BRANCH" "$TARGET_SHA"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

          # Revert all commits after TAG up to TARGET
          RANGE="$TAG_SHA..$TARGET_SHA"
          echo "Reverting range: $RANGE"
          echo "Range: $RANGE" >> "$GITHUB_STEP_SUMMARY"
          # 空レンジはノーオペ
          if [[ "$(git rev-list --count "$RANGE")" -eq 0 ]]; then
            echo "No commits in range (no changes)." >&2
            echo "noop=true" >> "$GITHUB_OUTPUT"
            echo "No-op: empty range" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          set +e
          git revert --no-edit --no-commit $RANGE
          REVERT_STATUS=$?
          set -e

          if [[ $REVERT_STATUS -ne 0 ]]; then
            echo "Revert encountered conflicts. Aborting to avoid partial rollback." >&2
            git revert --abort || true
            echo "Conflicts during revert $RANGE" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          if git diff --quiet; then
            echo "No changes to commit (already at $TAG)." >&2
            echo "noop=true" >> "$GITHUB_OUTPUT"
            echo "No-op: diff is clean" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          git commit -m "chore(rollback): Revert $TARGET_BRANCH to $TAG"
          git push --set-upstream origin "$BRANCH"
          echo "noop=false" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        id: pr
        if: steps.revert.outputs.noop == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = core.getInput('tag', { required: true });
            const target = core.getInput('target_branch', { required: true });
            const auto = core.getBooleanInput('auto_merge');
            const branch = core.getInput('branch') || process.env.BRANCH || '${{ steps.revert.outputs.branch }}';
            const defaultTitle = `Rollback ${target} to ${tag}`;
            const title = core.getInput('pr_title') || defaultTitle;
            const defaultBody = [
              `This PR reverts all commits on ${target} since tag \`${tag}\`.`,
              '',
              '**Action**:',
              `- Target branch: \`${target}\``,
              `- Rollback to: \`${tag}\``,
              '',
              'Generated by the Rollback workflow.'
            ].join('\n');
            const body = core.getInput('pr_body') || defaultBody;

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: branch,
              base: target,
              body,
              maintainer_can_modify: true,
              draft: false,
            });

            core.setOutput('number', pr.number.toString());
            core.setOutput('url', pr.html_url);
            core.setOutput('branch', branch);

            if (auto) {
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: 'merge',
                });
                core.setOutput('merged', 'true');
              } catch (e) {
                core.warning(`Auto-merge attempt failed: ${e.message}`);
                core.setOutput('merged', 'false');
              }
            }

      - name: Summary
        run: |
          if [ "${{ steps.revert.outputs.noop }}" = "true" ]; then
            echo "No-op: target already at specified tag." >> $GITHUB_STEP_SUMMARY
          else
            echo "Rollback PR: ${{ steps.pr.outputs.url }}" >> $GITHUB_STEP_SUMMARY
            echo "Branch: ${{ steps.pr.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          fi
